#  volumio-text.script - Text mode Plymouth theme
#
#  Copyright (C) 2025 Volumio Srl
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.
#
#  Written by: Volumio Team
#  Modified by: Nerd (adaptive rotation support)
#
#  References:
#    Freedesktop.org:
#      https://www.freedesktop.org/wiki/Software/Plymouth/Scripts/
#
#  NOTE: This theme relies on fbcon rotation for display rotation.
#        Use kernel parameters: video=HDMI-A-1:...,rotate=90 or fbcon=rotate:1
#        Plymouth Script API does not support rotating text images.

# --------------------------------- SETUP -------------------------------------

Window.SetBackgroundTopColor(0.0, 0.0, 0.0);
Window.SetBackgroundBottomColor(0.0, 0.0, 0.0);

# Get screen dimensions
screen_width = Window.GetWidth();
screen_height = Window.GetHeight();

# --------------------------------- TITLE TEXT --------------------------------

# Create "Volumio Player" text - white color (1, 1, 1)
title_font = "Sans Bold 16";

# Adapt font size to screen dimensions
if (screen_height < 480) {
  title_font = "Sans Bold 12";
}
if (screen_height < 240) {
  title_font = "Sans Bold 10";
}

title_image = Image.Text("Volumio Player", 1, 1, 1, 1, title_font);
title_sprite = Sprite(title_image);

# Center title
title_x = screen_width / 2 - title_image.GetWidth() / 2;
title_y = screen_height / 2 - 40;

# Ensure title is visible even on small screens
if (title_y < 20) {
  title_y = 20;
}

title_sprite.SetPosition(title_x, title_y, 10);

# --------------------------------- MESSAGE HANDLING --------------------------

# Message display area below title
message_font = "Sans 10";

if (screen_height < 480) {
  message_font = "Sans 8";
}
if (screen_height < 240) {
  message_font = "Sans 6";
}

message_sprite = Sprite();

# Calculate message position
message_y = title_y + title_image.GetHeight() + 15;

# Store for callback
global.message_font = message_font;
global.message_y = message_y;
global.screen_width = screen_width;

fun message_callback(text) {
  # Display message centered below title
  # Truncate if too long
  max_chars = 60;
  
  if (global.screen_width < 640) {
    max_chars = 40;
  }
  if (global.screen_width < 320) {
    max_chars = 30;
  }
  
  display_text = text;
  
  # Create message image
  message_image = Image.Text(display_text, 0.9, 0.9, 0.9, 1, global.message_font);
  message_sprite.SetImage(message_image);
  
  # Center the message
  message_x = global.screen_width / 2 - message_image.GetWidth() / 2;
  message_sprite.SetPosition(message_x, global.message_y, 10);
}

Plymouth.SetMessageFunction(message_callback);

# --------------------------------- BOOT PROGRESS -----------------------------

# Simple progress callback - we show messages only
fun progress_callback(duration, progress) {
  # Progress is shown through system messages
  # No visual progress bar in text theme
}

Plymouth.SetBootProgressFunction(progress_callback);

# --------------------------------- PASSWORD PROMPT ---------------------------

fun password_callback(prompt, bullets) {
  # Clear any existing password sprites
  if (global.password_prompt) {
    global.password_prompt.SetImage(Image());
  }
  if (global.password_bullets) {
    global.password_bullets.SetImage(Image());
  }
  
  # Create prompt text
  prompt_image = Image.Text(prompt, 1, 1, 1, 1, "Sans 12");
  if (!global.password_prompt) {
    global.password_prompt = Sprite();
  }
  global.password_prompt.SetImage(prompt_image);
  
  # Center prompt
  prompt_x = global.screen_width / 2 - prompt_image.GetWidth() / 2;
  prompt_y = global.screen_height / 2 + 40;
  global.password_prompt.SetPosition(prompt_x, prompt_y, 100);
  
  # Create bullets
  bullet_text = "";
  for (i = 0; i < bullets; i++) {
    bullet_text = bullet_text + "*";
  }
  
  bullet_image = Image.Text(bullet_text, 1, 1, 1, 1, "Sans 12");
  if (!global.password_bullets) {
    global.password_bullets = Sprite();
  }
  global.password_bullets.SetImage(bullet_image);
  
  bullet_x = global.screen_width / 2 - bullet_image.GetWidth() / 2;
  bullet_y = prompt_y + 25;
  global.password_bullets.SetPosition(bullet_x, bullet_y, 100);
}

Plymouth.SetDisplayPasswordFunction(password_callback);

# Store screen dimensions globally for password callback
global.screen_height = screen_height;

# --------------------------------- QUIT HANDLER ------------------------------

fun quit_callback() {
  # Clean up on quit
}

Plymouth.SetQuitFunction(quit_callback);
